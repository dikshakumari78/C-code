#include <iostream>
#include <vector>
class Shape {
public:
    virtual void draw() const = 0; 
    virtual ~Shape() {} 
};

class Circle : public Shape {
public:
    void draw() const override {
        std::cout << "Draw a Circle\n";
    
    }
};
class Square : public Shape {
public:
    void draw() const override {
        std::cout << "Draw a Square\n";
    }
};
class Triangle : public Shape {
public:
    void draw() const override {
        std::cout << "Draw a Triangle\n";
    }
};

int main() {
    std::vector<Shape*> shapes;
    shapes.push_back(new Circle());
    shapes.push_back(new Square());
    shapes.push_back(new Triangle());
    for (const auto& shape : shapes) {
        shape->draw();
    }

    for (auto& shape : shapes) {
        delete shape;
    }

    return 0;
}
