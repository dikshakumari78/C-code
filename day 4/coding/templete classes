#include <iostream>
#include <vector>

template <typename T>
class Vector {
private:
    std::vector<T> data;

public:
    Vector() {}

    void push_back(T value) {
        data.push_back(value);
    }

    Vector operator+(const Vector& other) const {
        if (data.size() != other.data.size()) {
            throw std::invalid_argument("Vectors must have the same size for addition");
        }

        Vector result;
        for (size_t i = 0; i < data.size(); ++i) {
            result.push_back(data[i] + other.data[i]);
        }
        return result;
    }

    Vector operator-(const Vector& other) const {
        if (data.size() != other.data.size()) {
            throw std::invalid_argument("Vectors must have the same size for subtraction");
        }

        Vector result;
        for (size_t i = 0; i < data.size(); ++i) {
            result.push_back(data[i] - other.data[i]);
        }
        return result;
    }

    T& operator[](size_t index) {
        if (index >= data.size()) {
            throw std::out_of_range("Index out of range");
        }
        return data[index];
    }

    const T& operator[](size_t index) const {
        if (index >= data.size()) {
            throw std::out_of_range("Index out of range");
        }
        return data[index];
    }

    void print() const {
        for (const auto& elem : data) {
            std::cout << elem << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    Vector<int> v1;
    v1.push_back(1);
    v1.push_back(2);
    v1.push_back(3);

    Vector<int> v2;
    v2.push_back(4);
    v2.push_back(5);
    v2.push_back(6);

    Vector<int> v3 = v1 + v2;
    v3.print(); // Output: 5 7 9

    Vector<int> v4 = v1 - v2;
    v4.print(); // Output: -3 -3 -3

    std::cout << v1[1] << std::endl; // Output: 2

    return 0;
}
