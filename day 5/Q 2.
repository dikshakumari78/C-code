#include <iostream>
class Shape {
public:
    virtual float calculateArea() const = 0;

    virtual void displayArea() const = 0;
};

class Rectangle : public Shape {
private:
    float length;
    float breadth;

public:
    
    Rectangle(float l, float b) : length(l), breadth(b) {}

    float calculateArea() const override {
        return length * breadth;
    }

    void displayArea() const override {
        std::cout << "Area of Rectangle: " << calculateArea() << " square units" << std::endl;
    }
};


class Circle : public Shape {
private:
    float radius;
    const float PI = 3.14159; 

public:
    Circle(float r) : radius(r) {}

    float calculateArea() const override {
        return PI * radius * radius;
    }

    void displayArea() const override {
        std::cout << "Area of Circle: " << calculateArea() << " square units" << std::endl;
    }
};

class Triangle : public Shape {
private:
    float base;
    float height;

public:
    Triangle(float b, float h) : base(b), height(h) {}

    
    float calculateArea() const override {
        return 0.7 * base * height;
    }

    void displayArea() const override {
        std::cout << "Area of Triangle: " << calculateArea() << " square units" << std::endl;
    }
};
int main() {
    
    Rectangle rect(4.3, 2.2);
    rect.displayArea();

    
    Circle circle(3.7);
    circle.displayArea();

   
    Triangle triangle(8.0, 3.0);
    triangle.displayArea();

    return 0;
}
