#include <iostream>

class Base {
public:
    virtual void display() {
        std::cout << "Base class" << std::endl;
    }
    virtual ~Base() {}  // Virtual destructor for polymorphic behavior
};

class Derived1 : public Base {
public:
    void display() override {
        std::cout << "Derived class 1" << std::endl;
    }
};

class Derived2 : public Base {
public:
    void display() override {
        std::cout << "Derived class 2" << std::endl;
    }
};

int main() {
    Base* base_ptr = new Derived1();

    // Using reinterpret_cast to reinterpret base_ptr as Derived1*
    Derived1* derived1_ptr = reinterpret_cast<Derived1*>(base_ptr);
    if (derived1_ptr) {
        std::cout << "Successfully reinterpreted to Derived1:" << std::endl;
        derived1_ptr->display();
    } else {
        std::cout << "Failed to reinterpret as Derived1!" << std::endl;
    }

    // Using reinterpret_cast to reinterpret base_ptr as Derived2*
    Derived2* derived2_ptr = reinterpret_cast<Derived2*>(base_ptr);
    if (derived2_ptr) {
        std::cout << "Successfully reinterpreted to Derived2:" << std::endl;
        derived2_ptr->display();
    } else {
        std::cout << "Failed to reinterpret as Derived2!" << std::endl;
    }

    delete base_ptr;

    return 0;
}
