#include <iostream>
#include <fstream>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

const int PORT = 8086;
const int BUFFER_SIZE = 1024;

void handleClient(int clientSocket) {
    char buffer[BUFFER_SIZE];
    int bytesRead;

    // Authentication
    bytesRead = recv(clientSocket, buffer, BUFFER_SIZE, 0);
    if (bytesRead > 0) {
        buffer[bytesRead] = '\0';
        std::string username(buffer);
        std::cout << "Username: " << username << std::endl;
    }

    bytesRead = recv(clientSocket, buffer, BUFFER_SIZE, 0);
    if (bytesRead > 0) {
        buffer[bytesRead] = '\0';
        std::string password(buffer);
        std::cout << "Password: " << password << std::endl;

        // Simple authentication check
        if (username == "user" && password == "password") {
            send(clientSocket, "AUTH_OK", strlen("AUTH_OK"), 0);
        } else {
            send(clientSocket, "AUTH_FAIL", strlen("AUTH_FAIL"), 0);
            close(clientSocket);
            return;
        }
    }

    // Handle file or message
    while ((bytesRead = recv(clientSocket, buffer, BUFFER_SIZE, 0)) > 0) {
        buffer[bytesRead] = '\0';

        if (strcmp(buffer, "FILE_START") == 0) {
            std::ofstream file("received_file", std::ios::binary);
            while (true) {
                bytesRead = recv(clientSocket, buffer, BUFFER_SIZE, 0);
                if (bytesRead <= 0) break;
                if (strcmp(buffer, "FILE_END") == 0) break;
                file.write(buffer, bytesRead);
            }
            file.close();
            send(clientSocket, "File received", strlen("File received"), 0);
        } else if (strcmp(buffer, "FILE_END") == 0) {
            send(clientSocket, "File received", strlen("File received"), 0);
        } else {
            std::cout << "Received message: " << buffer << std::endl;
            send(clientSocket, "Message received", strlen("Message received"), 0);
        }
    }

    close(clientSocket);
}

int main() {
    int serverSocket, clientSocket;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t clientAddrLen = sizeof(clientAddr);

    // Create socket
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket < 0) {
        std::cerr << "Socket creation error." << std::endl;
        return -1;
    }

    // Bind socket to address
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(PORT);
    if (bind(serverSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {
        std::cerr << "Bind failed." << std::endl;
        close(serverSocket);
        return -1;
    }

    // Listen for connections
    if (listen(serverSocket, 5) < 0) {
        std::cerr << "Listen failed." << std::endl;
        close(serverSocket);
        return -1;
    }

    std::cout << "Server listening on port " << PORT << std::endl;

    while (true) {
        // Accept connection
        clientSocket = accept(serverSocket, (struct sockaddr*)&clientAddr, &clientAddrLen);
        if (clientSocket < 0) {
            std::cerr << "Connection accept error." << std::endl;
            continue;
        }

        std::cout << "Client connected." << std::endl;

        // Handle client
        handleClient(clientSocket);
    }

    close(serverSocket);
    return 0;
}
